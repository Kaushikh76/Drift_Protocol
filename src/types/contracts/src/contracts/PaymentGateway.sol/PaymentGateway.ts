/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace PaymentGateway {
  export type PaymentStruct = {
    paymentId: string;
    user: AddressLike;
    merchant: AddressLike;
    paymentToken: AddressLike;
    paymentAmount: BigNumberish;
    fanToken: AddressLike;
    fanTokenAmount: BigNumberish;
    mchzAmount: BigNumberish;
    hyperlaneMessageId: BytesLike;
    completed: boolean;
  };

  export type PaymentStructOutput = [
    paymentId: string,
    user: string,
    merchant: string,
    paymentToken: string,
    paymentAmount: bigint,
    fanToken: string,
    fanTokenAmount: bigint,
    mchzAmount: bigint,
    hyperlaneMessageId: string,
    completed: boolean
  ] & {
    paymentId: string;
    user: string;
    merchant: string;
    paymentToken: string;
    paymentAmount: bigint;
    fanToken: string;
    fanTokenAmount: bigint;
    mchzAmount: bigint;
    hyperlaneMessageId: string;
    completed: boolean;
  };
}

export interface PaymentGatewayInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "executePayment"
      | "getPayment"
      | "getPaymentByMessageId"
      | "getQuote"
      | "messageToPaymentId"
      | "owner"
      | "paymentProcessor"
      | "payments"
      | "poolExists"
      | "renounceOwnership"
      | "setPaymentProcessor"
      | "transferOwnership"
      | "withdrawETH"
      | "withdrawToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BridgeInitiated"
      | "OwnershipTransferred"
      | "PaymentInitiated"
      | "SwapCompleted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "executePayment",
    values: [
      string,
      AddressLike,
      BigNumberish,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "getPayment", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getPaymentByMessageId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuote",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "messageToPaymentId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentProcessor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "payments", values: [string]): string;
  encodeFunctionData(
    functionFragment: "poolExists",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentProcessor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "executePayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPayment", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentByMessageId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getQuote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "messageToPaymentId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentProcessor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payments", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolExists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentProcessor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
}

export namespace BridgeInitiatedEvent {
  export type InputTuple = [
    paymentId: string,
    messageId: BytesLike,
    mchzAmount: BigNumberish
  ];
  export type OutputTuple = [
    paymentId: string,
    messageId: string,
    mchzAmount: bigint
  ];
  export interface OutputObject {
    paymentId: string;
    messageId: string;
    mchzAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentInitiatedEvent {
  export type InputTuple = [
    paymentId: string,
    user: AddressLike,
    merchant: AddressLike,
    paymentToken: AddressLike,
    paymentAmount: BigNumberish,
    fanToken: AddressLike,
    fanTokenAmount: BigNumberish
  ];
  export type OutputTuple = [
    paymentId: string,
    user: string,
    merchant: string,
    paymentToken: string,
    paymentAmount: bigint,
    fanToken: string,
    fanTokenAmount: bigint
  ];
  export interface OutputObject {
    paymentId: string;
    user: string;
    merchant: string;
    paymentToken: string;
    paymentAmount: bigint;
    fanToken: string;
    fanTokenAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapCompletedEvent {
  export type InputTuple = [paymentId: string, mchzAmount: BigNumberish];
  export type OutputTuple = [paymentId: string, mchzAmount: bigint];
  export interface OutputObject {
    paymentId: string;
    mchzAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PaymentGateway extends BaseContract {
  connect(runner?: ContractRunner | null): PaymentGateway;
  waitForDeployment(): Promise<this>;

  interface: PaymentGatewayInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  executePayment: TypedContractMethod<
    [
      paymentId: string,
      paymentToken: AddressLike,
      paymentAmount: BigNumberish,
      merchant: AddressLike,
      fanToken: AddressLike,
      fanTokenAmount: BigNumberish,
      minMchzOut: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getPayment: TypedContractMethod<
    [paymentId: string],
    [PaymentGateway.PaymentStructOutput],
    "view"
  >;

  getPaymentByMessageId: TypedContractMethod<
    [messageId: BytesLike],
    [PaymentGateway.PaymentStructOutput],
    "view"
  >;

  getQuote: TypedContractMethod<
    [paymentToken: AddressLike, mchzAmountOut: BigNumberish],
    [[bigint, boolean] & { paymentTokenNeeded: bigint; useWethRoute: boolean }],
    "view"
  >;

  messageToPaymentId: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  paymentProcessor: TypedContractMethod<[], [string], "view">;

  payments: TypedContractMethod<
    [arg0: string],
    [
      [
        string,
        string,
        string,
        string,
        bigint,
        string,
        bigint,
        bigint,
        string,
        boolean
      ] & {
        paymentId: string;
        user: string;
        merchant: string;
        paymentToken: string;
        paymentAmount: bigint;
        fanToken: string;
        fanTokenAmount: bigint;
        mchzAmount: bigint;
        hyperlaneMessageId: string;
        completed: boolean;
      }
    ],
    "view"
  >;

  poolExists: TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [boolean],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setPaymentProcessor: TypedContractMethod<
    [_paymentProcessor: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawETH: TypedContractMethod<[], [void], "nonpayable">;

  withdrawToken: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "executePayment"
  ): TypedContractMethod<
    [
      paymentId: string,
      paymentToken: AddressLike,
      paymentAmount: BigNumberish,
      merchant: AddressLike,
      fanToken: AddressLike,
      fanTokenAmount: BigNumberish,
      minMchzOut: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getPayment"
  ): TypedContractMethod<
    [paymentId: string],
    [PaymentGateway.PaymentStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPaymentByMessageId"
  ): TypedContractMethod<
    [messageId: BytesLike],
    [PaymentGateway.PaymentStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getQuote"
  ): TypedContractMethod<
    [paymentToken: AddressLike, mchzAmountOut: BigNumberish],
    [[bigint, boolean] & { paymentTokenNeeded: bigint; useWethRoute: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "messageToPaymentId"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paymentProcessor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "payments"
  ): TypedContractMethod<
    [arg0: string],
    [
      [
        string,
        string,
        string,
        string,
        bigint,
        string,
        bigint,
        bigint,
        string,
        boolean
      ] & {
        paymentId: string;
        user: string;
        merchant: string;
        paymentToken: string;
        paymentAmount: bigint;
        fanToken: string;
        fanTokenAmount: bigint;
        mchzAmount: bigint;
        hyperlaneMessageId: string;
        completed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "poolExists"
  ): TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPaymentProcessor"
  ): TypedContractMethod<
    [_paymentProcessor: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawETH"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawToken"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BridgeInitiated"
  ): TypedContractEvent<
    BridgeInitiatedEvent.InputTuple,
    BridgeInitiatedEvent.OutputTuple,
    BridgeInitiatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PaymentInitiated"
  ): TypedContractEvent<
    PaymentInitiatedEvent.InputTuple,
    PaymentInitiatedEvent.OutputTuple,
    PaymentInitiatedEvent.OutputObject
  >;
  getEvent(
    key: "SwapCompleted"
  ): TypedContractEvent<
    SwapCompletedEvent.InputTuple,
    SwapCompletedEvent.OutputTuple,
    SwapCompletedEvent.OutputObject
  >;

  filters: {
    "BridgeInitiated(string,bytes32,uint256)": TypedContractEvent<
      BridgeInitiatedEvent.InputTuple,
      BridgeInitiatedEvent.OutputTuple,
      BridgeInitiatedEvent.OutputObject
    >;
    BridgeInitiated: TypedContractEvent<
      BridgeInitiatedEvent.InputTuple,
      BridgeInitiatedEvent.OutputTuple,
      BridgeInitiatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PaymentInitiated(string,address,address,address,uint256,address,uint256)": TypedContractEvent<
      PaymentInitiatedEvent.InputTuple,
      PaymentInitiatedEvent.OutputTuple,
      PaymentInitiatedEvent.OutputObject
    >;
    PaymentInitiated: TypedContractEvent<
      PaymentInitiatedEvent.InputTuple,
      PaymentInitiatedEvent.OutputTuple,
      PaymentInitiatedEvent.OutputObject
    >;

    "SwapCompleted(string,uint256)": TypedContractEvent<
      SwapCompletedEvent.InputTuple,
      SwapCompletedEvent.OutputTuple,
      SwapCompletedEvent.OutputObject
    >;
    SwapCompleted: TypedContractEvent<
      SwapCompletedEvent.InputTuple,
      SwapCompletedEvent.OutputTuple,
      SwapCompletedEvent.OutputObject
    >;
  };
}
