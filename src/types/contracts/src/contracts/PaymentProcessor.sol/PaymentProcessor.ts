/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace PaymentProcessor {
  export type ProcessedPaymentStruct = {
    paymentId: string;
    merchant: AddressLike;
    fanToken: AddressLike;
    fanTokenAmount: BigNumberish;
    chzReceived: BigNumberish;
    fanTokensSent: BigNumberish;
    completed: boolean;
    timestamp: BigNumberish;
  };

  export type ProcessedPaymentStructOutput = [
    paymentId: string,
    merchant: string,
    fanToken: string,
    fanTokenAmount: bigint,
    chzReceived: bigint,
    fanTokensSent: bigint,
    completed: boolean,
    timestamp: bigint
  ] & {
    paymentId: string;
    merchant: string;
    fanToken: string;
    fanTokenAmount: bigint;
    chzReceived: bigint;
    fanTokensSent: bigint;
    completed: boolean;
    timestamp: bigint;
  };
}

export interface PaymentProcessorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getFanTokenPrice"
      | "getProcessedPayment"
      | "handle"
      | "hyperlaneMailbox"
      | "owner"
      | "paymentGateway"
      | "processedMessages"
      | "processedPayments"
      | "renounceOwnership"
      | "sepoliaDomain"
      | "setHyperlaneMailbox"
      | "setPaymentGateway"
      | "setSepoliaDomain"
      | "transferOwnership"
      | "withdrawCHZ"
      | "withdrawToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FanTokenSwapCompleted"
      | "OwnershipTransferred"
      | "PaymentCompleted"
      | "PaymentReceived"
      | "PaymentSentToMerchant"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getFanTokenPrice",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProcessedPayment",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "handle",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hyperlaneMailbox",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentGateway",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "processedMessages",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "processedPayments",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sepoliaDomain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setHyperlaneMailbox",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentGateway",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSepoliaDomain",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCHZ",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getFanTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProcessedPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "handle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hyperlaneMailbox",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentGateway",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processedMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processedPayments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sepoliaDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHyperlaneMailbox",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentGateway",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSepoliaDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCHZ",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
}

export namespace FanTokenSwapCompletedEvent {
  export type InputTuple = [
    paymentId: string,
    fanToken: AddressLike,
    fanTokenAmount: BigNumberish
  ];
  export type OutputTuple = [
    paymentId: string,
    fanToken: string,
    fanTokenAmount: bigint
  ];
  export interface OutputObject {
    paymentId: string;
    fanToken: string;
    fanTokenAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentCompletedEvent {
  export type InputTuple = [
    paymentId: string,
    merchant: AddressLike,
    fanToken: AddressLike,
    totalFanTokens: BigNumberish
  ];
  export type OutputTuple = [
    paymentId: string,
    merchant: string,
    fanToken: string,
    totalFanTokens: bigint
  ];
  export interface OutputObject {
    paymentId: string;
    merchant: string;
    fanToken: string;
    totalFanTokens: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentReceivedEvent {
  export type InputTuple = [paymentId: string, chzAmount: BigNumberish];
  export type OutputTuple = [paymentId: string, chzAmount: bigint];
  export interface OutputObject {
    paymentId: string;
    chzAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentSentToMerchantEvent {
  export type InputTuple = [
    paymentId: string,
    merchant: AddressLike,
    fanToken: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    paymentId: string,
    merchant: string,
    fanToken: string,
    amount: bigint
  ];
  export interface OutputObject {
    paymentId: string;
    merchant: string;
    fanToken: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PaymentProcessor extends BaseContract {
  connect(runner?: ContractRunner | null): PaymentProcessor;
  waitForDeployment(): Promise<this>;

  interface: PaymentProcessorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFanTokenPrice: TypedContractMethod<
    [fanToken: AddressLike, chzAmount: BigNumberish],
    [bigint],
    "view"
  >;

  getProcessedPayment: TypedContractMethod<
    [paymentId: string],
    [PaymentProcessor.ProcessedPaymentStructOutput],
    "view"
  >;

  handle: TypedContractMethod<
    [origin: BigNumberish, sender: BytesLike, message: BytesLike],
    [void],
    "nonpayable"
  >;

  hyperlaneMailbox: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  paymentGateway: TypedContractMethod<[], [string], "view">;

  processedMessages: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  processedPayments: TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, bigint, bigint, bigint, boolean, bigint] & {
        paymentId: string;
        merchant: string;
        fanToken: string;
        fanTokenAmount: bigint;
        chzReceived: bigint;
        fanTokensSent: bigint;
        completed: boolean;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  sepoliaDomain: TypedContractMethod<[], [bigint], "view">;

  setHyperlaneMailbox: TypedContractMethod<
    [_mailbox: AddressLike],
    [void],
    "nonpayable"
  >;

  setPaymentGateway: TypedContractMethod<
    [_gateway: AddressLike],
    [void],
    "nonpayable"
  >;

  setSepoliaDomain: TypedContractMethod<
    [_domain: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawCHZ: TypedContractMethod<[], [void], "nonpayable">;

  withdrawToken: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getFanTokenPrice"
  ): TypedContractMethod<
    [fanToken: AddressLike, chzAmount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProcessedPayment"
  ): TypedContractMethod<
    [paymentId: string],
    [PaymentProcessor.ProcessedPaymentStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "handle"
  ): TypedContractMethod<
    [origin: BigNumberish, sender: BytesLike, message: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hyperlaneMailbox"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paymentGateway"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "processedMessages"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "processedPayments"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, bigint, bigint, bigint, boolean, bigint] & {
        paymentId: string;
        merchant: string;
        fanToken: string;
        fanTokenAmount: bigint;
        chzReceived: bigint;
        fanTokensSent: bigint;
        completed: boolean;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sepoliaDomain"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setHyperlaneMailbox"
  ): TypedContractMethod<[_mailbox: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPaymentGateway"
  ): TypedContractMethod<[_gateway: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSepoliaDomain"
  ): TypedContractMethod<[_domain: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawCHZ"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawToken"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "FanTokenSwapCompleted"
  ): TypedContractEvent<
    FanTokenSwapCompletedEvent.InputTuple,
    FanTokenSwapCompletedEvent.OutputTuple,
    FanTokenSwapCompletedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PaymentCompleted"
  ): TypedContractEvent<
    PaymentCompletedEvent.InputTuple,
    PaymentCompletedEvent.OutputTuple,
    PaymentCompletedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentReceived"
  ): TypedContractEvent<
    PaymentReceivedEvent.InputTuple,
    PaymentReceivedEvent.OutputTuple,
    PaymentReceivedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentSentToMerchant"
  ): TypedContractEvent<
    PaymentSentToMerchantEvent.InputTuple,
    PaymentSentToMerchantEvent.OutputTuple,
    PaymentSentToMerchantEvent.OutputObject
  >;

  filters: {
    "FanTokenSwapCompleted(string,address,uint256)": TypedContractEvent<
      FanTokenSwapCompletedEvent.InputTuple,
      FanTokenSwapCompletedEvent.OutputTuple,
      FanTokenSwapCompletedEvent.OutputObject
    >;
    FanTokenSwapCompleted: TypedContractEvent<
      FanTokenSwapCompletedEvent.InputTuple,
      FanTokenSwapCompletedEvent.OutputTuple,
      FanTokenSwapCompletedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PaymentCompleted(string,address,address,uint256)": TypedContractEvent<
      PaymentCompletedEvent.InputTuple,
      PaymentCompletedEvent.OutputTuple,
      PaymentCompletedEvent.OutputObject
    >;
    PaymentCompleted: TypedContractEvent<
      PaymentCompletedEvent.InputTuple,
      PaymentCompletedEvent.OutputTuple,
      PaymentCompletedEvent.OutputObject
    >;

    "PaymentReceived(string,uint256)": TypedContractEvent<
      PaymentReceivedEvent.InputTuple,
      PaymentReceivedEvent.OutputTuple,
      PaymentReceivedEvent.OutputObject
    >;
    PaymentReceived: TypedContractEvent<
      PaymentReceivedEvent.InputTuple,
      PaymentReceivedEvent.OutputTuple,
      PaymentReceivedEvent.OutputObject
    >;

    "PaymentSentToMerchant(string,address,address,uint256)": TypedContractEvent<
      PaymentSentToMerchantEvent.InputTuple,
      PaymentSentToMerchantEvent.OutputTuple,
      PaymentSentToMerchantEvent.OutputObject
    >;
    PaymentSentToMerchant: TypedContractEvent<
      PaymentSentToMerchantEvent.InputTuple,
      PaymentSentToMerchantEvent.OutputTuple,
      PaymentSentToMerchantEvent.OutputObject
    >;
  };
}
